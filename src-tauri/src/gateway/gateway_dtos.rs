use serde::{Deserialize, Serialize};
use serde_json::Value;

#[allow(unused)]
#[derive(Debug, Clone)]
pub(crate) enum OpCode {
    Dispatch = 0,
    Heartbeat = 1,
    Identify = 2,
    UpdatePresence = 3,
    UpdateVoiceState = 4,
    RequestGuildMembers = 8,
    Hello = 10,
    HeartbeatAck = 11,
}

impl<'de> Deserialize<'de> for OpCode {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let value = u8::deserialize(deserializer)?;
        match value {
            0 => Ok(OpCode::Dispatch),
            1 => Ok(OpCode::Heartbeat),
            2 => Ok(OpCode::Identify),
            3 => Ok(OpCode::UpdatePresence),
            4 => Ok(OpCode::UpdateVoiceState),
            8 => Ok(OpCode::RequestGuildMembers),
            10 => Ok(OpCode::Hello),
            11 => Ok(OpCode::HeartbeatAck),
            _ => Err(serde::de::Error::custom("Invalid OpCode")),
        }
    }
}

impl Serialize for OpCode {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let value = match self {
            OpCode::Dispatch => 0,
            OpCode::Heartbeat => 1,
            OpCode::Identify => 2,
            OpCode::UpdatePresence => 3,
            OpCode::UpdateVoiceState => 4,
            OpCode::RequestGuildMembers => 8,
            OpCode::Hello => 10,
            OpCode::HeartbeatAck => 11,
        };
        serializer.serialize_u8(value)
    }
}

impl PartialEq for OpCode {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (OpCode::Dispatch, OpCode::Dispatch) => true,
            (OpCode::Heartbeat, OpCode::Heartbeat) => true,
            (OpCode::Identify, OpCode::Identify) => true,
            (OpCode::UpdatePresence, OpCode::UpdatePresence) => true,
            (OpCode::UpdateVoiceState, OpCode::UpdateVoiceState) => true,
            (OpCode::RequestGuildMembers, OpCode::RequestGuildMembers) => true,
            (OpCode::Hello, OpCode::Hello) => true,
            (OpCode::HeartbeatAck, OpCode::HeartbeatAck) => true,
            _ => false,
        }
    }
}

pub(crate) trait Message: Serialize {
    fn op_code(&self) -> OpCode;

    /// Converts the Message into a generic message
    fn to_json(&self) -> String {
        serde_json::to_string(
            &GenericMessage {
                op_code: self.op_code(),
                data: Some(serde_json::to_value(self).unwrap()),
                sequence: None,
                event_name: None,
            }
        ).unwrap()
    }
}

#[derive(Debug, Clone)]
pub(crate) enum EventName {
    Ready,
    Resumed,
    ChannelCreate,
    ChannelUpdate,
    ChannelDelete,
    ChannelPinsUpdate,
    GuildCreate,
    GuildUpdate,
    GuildDelete,
    GuildBanAdd,
    GuildBanRemove,
    GuildEmojisUpdate,
    GuildIntegrationsUpdate,
    GuildMemberAdd,
    GuildMemberRemove,
    GuildMemberUpdate,
    GuildMembersChunk,
    GuildRoleCreate,
    GuildRoleUpdate,
    GuildRoleDelete,
    GuildScheduledEventCreate,
    GuildScheduledEventUpdate,
    GuildScheduledEventDelete,
    GuildScheduledEventUserAdd,
    GuildScheduledEventUserRemove,
    GuildStickerCreate,
    GuildStickerUpdate,
    GuildStickerDelete,
    GuildWebhooksUpdate,
    IntegrationCreate,
    IntegrationUpdate,
    IntegrationDelete,
    InteractionCreate,
    InviteCreate,
    InviteDelete,
    MessageCreate,
    MessageUpdate,
    MessageDelete,
    MessageDeleteBulk,
    MessageReactionAdd,
    MessageReactionRemove,
    MessageReactionRemoveAll,
    MessageReactionRemoveEmoji,
    PresenceUpdate,
    StageInstanceCreate,
    StageInstanceUpdate,
    StageInstanceDelete,
    TypingStart,
    UserUpdate,
    VoiceStateUpdate,
    VoiceServerUpdate,
    WebhooksUpdate,
    ApplicationCommandPermissionsUpdate,
    ApplicationCommandCreate,
    ApplicationCommandUpdate,
    ApplicationCommandDelete,
    AutoModerationRuleCreate,
    AutoModerationRuleUpdate,
    AutoModerationRuleDelete,
    AutoModerationActionExecution,
    ChannelFollowAdd,
    GuildAuditLogEntryCreate,
    GuildApplicationCommandPermissionsUpdate,
    GuildApplicationCommandCreate,
    GuildApplicationCommandUpdate,
    GuildApplicationCommandDelete,
    GuildStickerPackReceive,
    IntegrationSubscribe,
    InteractionResponse,
    ChannelUnreadUpdate,
    ConversationSummaryUpdate,
    SessionsReplace,
    GuildJoinRequestUpdate,
    ContentInventoryInboxStale,
    MessageAcknowledgment,
    VoiceChannelStatusUpdate,
    UserConnectionUpdate
}

impl<'de> Deserialize<'de> for EventName {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: serde::Deserializer<'de>,
    {
        let value = String::deserialize(deserializer)?;
        match value.as_str() {
            "READY" => Ok(EventName::Ready),
            "RESUMED" => Ok(EventName::Resumed),
            "CHANNEL_CREATE" => Ok(EventName::ChannelCreate),
            "CHANNEL_UPDATE" => Ok(EventName::ChannelUpdate),
            "CHANNEL_DELETE" => Ok(EventName::ChannelDelete),
            "CHANNEL_PINS_UPDATE" => Ok(EventName::ChannelPinsUpdate),
            "GUILD_CREATE" => Ok(EventName::GuildCreate),
            "GUILD_UPDATE" => Ok(EventName::GuildUpdate),
            "GUILD_DELETE" => Ok(EventName::GuildDelete),
            "GUILD_BAN_ADD" => Ok(EventName::GuildBanAdd),
            "GUILD_BAN_REMOVE" => Ok(EventName::GuildBanRemove),
            "GUILD_EMOJIS_UPDATE" => Ok(EventName::GuildEmojisUpdate),
            "GUILD_INTEGRATIONS_UPDATE" => Ok(EventName::GuildIntegrationsUpdate),
            "GUILD_MEMBER_ADD" => Ok(EventName::GuildMemberAdd),
            "GUILD_MEMBER_REMOVE" => Ok(EventName::GuildMemberRemove),
            "GUILD_MEMBER_UPDATE" => Ok(EventName::GuildMemberUpdate),
            "GUILD_MEMBERS_CHUNK" => Ok(EventName::GuildMembersChunk),
            "GUILD_ROLE_CREATE" => Ok(EventName::GuildRoleCreate),
            "GUILD_ROLE_UPDATE" => Ok(EventName::GuildRoleUpdate),
            "GUILD_ROLE_DELETE" => Ok(EventName::GuildRoleDelete),
            "GUILD_SCHEDULED_EVENT_CREATE" => Ok(EventName::GuildScheduledEventCreate),
            "GUILD_SCHEDULED_EVENT_UPDATE" => Ok(EventName::GuildScheduledEventUpdate),
            "GUILD_SCHEDULED_EVENT_DELETE" => Ok(EventName::GuildScheduledEventDelete),
            "GUILD_SCHEDULED_EVENT_USER_ADD" => Ok(EventName::GuildScheduledEventUserAdd),
            "GUILD_SCHEDULED_EVENT_USER_REMOVE" => Ok(EventName::GuildScheduledEventUserRemove),
            "GUILD_STICKER_CREATE" => Ok(EventName::GuildStickerCreate),
            "GUILD_STICKER_UPDATE" => Ok(EventName::GuildStickerUpdate),
            "GUILD_STICKER_DELETE" => Ok(EventName::GuildStickerDelete),
            "GUILD_WEBHOOKS_UPDATE" => Ok(EventName::GuildWebhooksUpdate),
            "INTEGRATION_CREATE" => Ok(EventName::IntegrationCreate),
            "INTEGRATION_UPDATE" => Ok(EventName::IntegrationUpdate),
            "INTEGRATION_DELETE" => Ok(EventName::IntegrationDelete),
            "INTERACTION_CREATE" => Ok(EventName::InteractionCreate),
            "INVITE_CREATE" => Ok(EventName::InviteCreate),
            "INVITE_DELETE" => Ok(EventName::InviteDelete),
            "MESSAGE_CREATE" => Ok(EventName::MessageCreate),
            "MESSAGE_UPDATE" => Ok(EventName::MessageUpdate),
            "MESSAGE_DELETE" => Ok(EventName::MessageDelete),
            "MESSAGE_DELETE_BULK" => Ok(EventName::MessageDeleteBulk),
            "MESSAGE_REACTION_ADD" => Ok(EventName::MessageReactionAdd),
            "MESSAGE_REACTION_REMOVE" => Ok(EventName::MessageReactionRemove),
            "MESSAGE_REACTION_REMOVE_ALL" => Ok(EventName::MessageReactionRemoveAll),
            "MESSAGE_REACTION_REMOVE_EMOJI" => Ok(EventName::MessageReactionRemoveEmoji),
            "PRESENCE_UPDATE" => Ok(EventName::PresenceUpdate),
            "STAGE_INSTANCE_CREATE" => Ok(EventName::StageInstanceCreate),
            "STAGE_INSTANCE_UPDATE" => Ok(EventName::StageInstanceUpdate),
            "STAGE_INSTANCE_DELETE" => Ok(EventName::StageInstanceDelete),
            "TYPING_START" => Ok(EventName::TypingStart),
            "USER_UPDATE" => Ok(EventName::UserUpdate),
            "VOICE_STATE_UPDATE" => Ok(EventName::VoiceStateUpdate),
            "VOICE_SERVER_UPDATE" => Ok(EventName::VoiceServerUpdate),
            "WEBHOOKS_UPDATE" => Ok(EventName::WebhooksUpdate),
            "APPLICATION_COMMAND_PERMISSIONS_UPDATE" => Ok(EventName::ApplicationCommandPermissionsUpdate),
            "APPLICATION_COMMAND_CREATE" => Ok(EventName::ApplicationCommandCreate),
            "APPLICATION_COMMAND_UPDATE" => Ok(EventName::ApplicationCommandUpdate),
            "APPLICATION_COMMAND_DELETE" => Ok(EventName::ApplicationCommandDelete),
            "AUTO_MODERATION_RULE_CREATE" => Ok(EventName::AutoModerationRuleCreate),
            "AUTO_MODERATION_RULE_UPDATE" => Ok(EventName::AutoModerationRuleUpdate),
            "AUTO_MODERATION_RULE_DELETE" => Ok(EventName::AutoModerationRuleDelete),
            "AUTO_MODERATION_ACTION_EXECUTION" => Ok(EventName::AutoModerationActionExecution),
            "CHANNEL_FOLLOW_ADD" => Ok(EventName::ChannelFollowAdd),
            "GUILD_AUDIT_LOG_ENTRY_CREATE" => Ok(EventName::GuildAuditLogEntryCreate),
            "GUILD_APPLICATION_COMMAND_PERMISSIONS_UPDATE" => Ok(EventName::GuildApplicationCommandPermissionsUpdate),
            "GUILD_APPLICATION_COMMAND_CREATE" => Ok(EventName::GuildApplicationCommandCreate),
            "GUILD_APPLICATION_COMMAND_UPDATE" => Ok(EventName::GuildApplicationCommandUpdate),
            "GUILD_APPLICATION_COMMAND_DELETE" => Ok(EventName::GuildApplicationCommandDelete),
            "GUILD_STICKER_PACK_RECEIVE" => Ok(EventName::GuildStickerPackReceive),
            "INTEGRATION_SUBSCRIBE" => Ok(EventName::IntegrationSubscribe),
            "INTERACTION_RESPONSE" => Ok(EventName::InteractionResponse),
            "CHANNEL_UNREAD_UPDATE" => Ok(EventName::ChannelUnreadUpdate),
            "CONVERSATION_SUMMARY_UPDATE" => Ok(EventName::ConversationSummaryUpdate),
            "SESSIONS_REPLACE" => Ok(EventName::SessionsReplace),
            "GUILD_JOIN_REQUEST_UPDATE" => Ok(EventName::GuildJoinRequestUpdate),
            "CONTENT_INVENTORY_INBOX_STALE" => Ok(EventName::ContentInventoryInboxStale),
            "MESSAGE_ACK" => Ok(EventName::MessageAcknowledgment),
            "VOICE_CHANNEL_STATUS_UPDATE" => Ok(EventName::VoiceChannelStatusUpdate),
            "USER_CONNECTIONS_UPDATE" => Ok(EventName::UserConnectionUpdate),
            unkonwn_name => Err(serde::de::Error::custom(format!("Invalid EventName: {}", unkonwn_name))),
        }
    }
}

impl Serialize for EventName {
    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
    where
        S: serde::Serializer,
    {
        let value = match self {
            EventName::Ready => "READY",
            EventName::Resumed => "RESUMED",
            EventName::ChannelCreate => "CHANNEL_CREATE",
            EventName::ChannelUpdate => "CHANNEL_UPDATE",
            EventName::ChannelDelete => "CHANNEL_DELETE",
            EventName::ChannelPinsUpdate => "CHANNEL_PINS_UPDATE",
            EventName::GuildCreate => "GUILD_CREATE",
            EventName::GuildUpdate => "GUILD_UPDATE",
            EventName::GuildDelete => "GUILD_DELETE",
            EventName::GuildBanAdd => "GUILD_BAN_ADD",
            EventName::GuildBanRemove => "GUILD_BAN_REMOVE",
            EventName::GuildEmojisUpdate => "GUILD_EMOJIS_UPDATE",
            EventName::GuildIntegrationsUpdate => "GUILD_INTEGRATIONS_UPDATE",
            EventName::GuildMemberAdd => "GUILD_MEMBER_ADD",
            EventName::GuildMemberRemove => "GUILD_MEMBER_REMOVE",
            EventName::GuildMemberUpdate => "GUILD_MEMBER_UPDATE",
            EventName::GuildMembersChunk => "GUILD_MEMBERS_CHUNK",
            EventName::GuildRoleCreate => "GUILD_ROLE_CREATE",
            EventName::GuildRoleUpdate => "GUILD_ROLE_UPDATE",
            EventName::GuildRoleDelete => "GUILD_ROLE_DELETE",
            EventName::GuildScheduledEventCreate => "GUILD_SCHEDULED_EVENT_CREATE",
            EventName::GuildScheduledEventUpdate => "GUILD_SCHEDULED_EVENT_UPDATE",
            EventName::GuildScheduledEventDelete => "GUILD_SCHEDULED_EVENT_DELETE",
            EventName::GuildScheduledEventUserAdd => "GUILD_SCHEDULED_EVENT_USER_ADD",
            EventName::GuildScheduledEventUserRemove => "GUILD_SCHEDULED_EVENT_USER_REMOVE",
            EventName::GuildStickerCreate => "GUILD_STICKER_CREATE",
            EventName::GuildStickerUpdate => "GUILD_STICKER_UPDATE",
            EventName::GuildStickerDelete => "GUILD_STICKER_DELETE",
            EventName::GuildWebhooksUpdate => "GUILD_WEBHOOKS_UPDATE",
            EventName::IntegrationCreate => "INTEGRATION_CREATE",
            EventName::IntegrationUpdate => "INTEGRATION_UPDATE",
            EventName::IntegrationDelete => "INTEGRATION_DELETE",
            EventName::InteractionCreate => "INTERACTION_CREATE",
            EventName::InviteCreate => "INVITE_CREATE",
            EventName::InviteDelete => "INVITE_DELETE",
            EventName::MessageCreate => "MESSAGE_CREATE",
            EventName::MessageUpdate => "MESSAGE_UPDATE",
            EventName::MessageDelete => "MESSAGE_DELETE",
            EventName::MessageDeleteBulk => "MESSAGE_DELETE_BULK",
            EventName::MessageReactionAdd => "MESSAGE_REACTION_ADD",
            EventName::MessageReactionRemove => "MESSAGE_REACTION_REMOVE",
            EventName::MessageReactionRemoveAll => "MESSAGE_REACTION_REMOVE_ALL",
            EventName::MessageReactionRemoveEmoji => "MESSAGE_REACTION_REMOVE_EMOJI",
            EventName::PresenceUpdate => "PRESENCE_UPDATE",
            EventName::StageInstanceCreate => "STAGE_INSTANCE_CREATE",
            EventName::StageInstanceUpdate => "STAGE_INSTANCE_UPDATE",
            EventName::StageInstanceDelete => "STAGE_INSTANCE_DELETE",
            EventName::TypingStart => "TYPING_START",
            EventName::UserUpdate => "USER_UPDATE",
            EventName::VoiceStateUpdate => "VOICE_STATE_UPDATE",
            EventName::VoiceServerUpdate => "VOICE_SERVER_UPDATE",
            EventName::WebhooksUpdate => "WEBHOOKS_UPDATE",
            EventName::ApplicationCommandPermissionsUpdate => "APPLICATION_COMMAND_PERMISSIONS_UPDATE",
            EventName::ApplicationCommandCreate => "APPLICATION_COMMAND_CREATE",
            EventName::ApplicationCommandUpdate => "APPLICATION_COMMAND_UPDATE",
            EventName::ApplicationCommandDelete => "APPLICATION_COMMAND_DELETE",
            EventName::AutoModerationRuleCreate => "AUTO_MODERATION_RULE_CREATE",
            EventName::AutoModerationRuleUpdate => "AUTO_MODERATION_RULE_UPDATE",
            EventName::AutoModerationRuleDelete => "AUTO_MODERATION_RULE_DELETE",
            EventName::AutoModerationActionExecution => "AUTO_MODERATION_ACTION_EXECUTION",
            EventName::ChannelFollowAdd => "CHANNEL_FOLLOW_ADD",
            EventName::GuildAuditLogEntryCreate => "GUILD_AUDIT_LOG_ENTRY_CREATE",
            EventName::GuildApplicationCommandPermissionsUpdate => "GUILD_APPLICATION_COMMAND_PERMISSIONS_UPDATE",
            EventName::GuildApplicationCommandCreate => "GUILD_APPLICATION_COMMAND_CREATE",
            EventName::GuildApplicationCommandUpdate => "GUILD_APPLICATION_COMMAND_UPDATE",
            EventName::GuildApplicationCommandDelete => "GUILD_APPLICATION_COMMAND_DELETE",
            EventName::GuildStickerPackReceive => "GUILD_STICKER_PACK_RECEIVE",
            EventName::IntegrationSubscribe => "INTEGRATION_SUBSCRIBE",
            EventName::InteractionResponse => "INTERACTION_RESPONSE",
            EventName::ChannelUnreadUpdate => "CHANNEL_UNREAD_UPDATE",
            EventName::ConversationSummaryUpdate => "CONVERSATION_SUMMARY_UPDATE",
            EventName::SessionsReplace => "SESSIONS_REPLACE",
            EventName::GuildJoinRequestUpdate => "GUILD_JOIN_REQUEST_UPDATE",
            EventName::ContentInventoryInboxStale => "CONTENT_INVENTORY_INBOX_STALE",
            EventName::MessageAcknowledgment => "MESSAGE_ACK",
            EventName::VoiceChannelStatusUpdate => "VOICE_CHANNEL_STATUS_UPDATE",
            EventName::UserConnectionUpdate => "USER_CONNECTIONS_UPDATE",
        };
        serializer.serialize_str(value)
    }
}

impl PartialEq for EventName {
    fn eq(&self, other: &Self) -> bool {
        match (self, other) {
            (EventName::Ready, EventName::Ready) => true,
            (EventName::Resumed, EventName::Resumed) => true,
            (EventName::ChannelCreate, EventName::ChannelCreate) => true,
            (EventName::ChannelUpdate, EventName::ChannelUpdate) => true,
            (EventName::ChannelDelete, EventName::ChannelDelete) => true,
            (EventName::ChannelPinsUpdate, EventName::ChannelPinsUpdate) => true,
            (EventName::GuildCreate, EventName::GuildCreate) => true,
            (EventName::GuildUpdate, EventName::GuildUpdate) => true,
            (EventName::GuildDelete, EventName::GuildDelete) => true,
            (EventName::GuildBanAdd, EventName::GuildBanAdd) => true,
            (EventName::GuildBanRemove, EventName::GuildBanRemove) => true,
            (EventName::GuildEmojisUpdate, EventName::GuildEmojisUpdate) => true,
            (EventName::GuildIntegrationsUpdate, EventName::GuildIntegrationsUpdate) => true,
            (EventName::GuildMemberAdd, EventName::GuildMemberAdd) => true,
            (EventName::GuildMemberRemove, EventName::GuildMemberRemove) => true,
            (EventName::GuildMemberUpdate, EventName::GuildMemberUpdate) => true,
            (EventName::GuildMembersChunk, EventName::GuildMembersChunk) => true,
            (EventName::GuildRoleCreate, EventName::GuildRoleCreate) => true,
            (EventName::GuildRoleUpdate, EventName::GuildRoleUpdate) => true,
            (EventName::GuildRoleDelete, EventName::GuildRoleDelete) => true,
            (EventName::GuildScheduledEventCreate, EventName::GuildScheduledEventCreate) => true,
            (EventName::GuildScheduledEventUpdate, EventName::GuildScheduledEventUpdate) => true,
            (EventName::GuildScheduledEventDelete, EventName::GuildScheduledEventDelete) => true,
            (EventName::GuildScheduledEventUserAdd, EventName::GuildScheduledEventUserAdd) => true,
            (EventName::GuildScheduledEventUserRemove, EventName::GuildScheduledEventUserRemove) => true,
            (EventName::GuildStickerCreate, EventName::GuildStickerCreate) => true,
            (EventName::GuildStickerUpdate, EventName::GuildStickerUpdate) => true,
            (EventName::GuildStickerDelete, EventName::GuildStickerDelete) => true,
            (EventName::GuildWebhooksUpdate, EventName::GuildWebhooksUpdate) => true,
            (EventName::IntegrationCreate, EventName::IntegrationCreate) => true,
            (EventName::IntegrationUpdate, EventName::IntegrationUpdate) => true,
            (EventName::IntegrationDelete, EventName::IntegrationDelete) => true,
            (EventName::InteractionCreate, EventName::InteractionCreate) => true,
            (EventName::InviteCreate, EventName::InviteCreate) => true,
            (EventName::InviteDelete, EventName::InviteDelete) => true,
            (EventName::MessageCreate, EventName::MessageCreate) => true,
            (EventName::MessageUpdate, EventName::MessageUpdate) => true,
            (EventName::MessageDelete, EventName::MessageDelete) => true,
            (EventName::MessageDeleteBulk, EventName::MessageDeleteBulk) => true,
            (EventName::MessageReactionAdd, EventName::MessageReactionAdd) => true,
            (EventName::MessageReactionRemove, EventName::MessageReactionRemove) => true,
            (EventName::MessageReactionRemoveAll, EventName::MessageReactionRemoveAll) => true,
            (EventName::MessageReactionRemoveEmoji, EventName::MessageReactionRemoveEmoji) => true,
            (EventName::PresenceUpdate, EventName::PresenceUpdate) => true,
            (EventName::StageInstanceCreate, EventName::StageInstanceCreate) => true,
            (EventName::StageInstanceUpdate, EventName::StageInstanceUpdate) => true,
            (EventName::StageInstanceDelete, EventName::StageInstanceDelete) => true,
            (EventName::TypingStart, EventName::TypingStart) => true,
            (EventName::UserUpdate, EventName::UserUpdate) => true,
            (EventName::VoiceStateUpdate, EventName::VoiceStateUpdate) => true,
            (EventName::VoiceServerUpdate, EventName::VoiceServerUpdate) => true,
            (EventName::WebhooksUpdate, EventName::WebhooksUpdate) => true,
            (EventName::ApplicationCommandPermissionsUpdate, EventName::ApplicationCommandPermissionsUpdate) => true,
            (EventName::ApplicationCommandCreate, EventName::ApplicationCommandCreate) => true,
            (EventName::ApplicationCommandUpdate, EventName::ApplicationCommandUpdate) => true,
            (EventName::ApplicationCommandDelete, EventName::ApplicationCommandDelete) => true,
            (EventName::AutoModerationRuleCreate, EventName::AutoModerationRuleCreate) => true,
            (EventName::AutoModerationRuleUpdate, EventName::AutoModerationRuleUpdate) => true,
            (EventName::AutoModerationRuleDelete, EventName::AutoModerationRuleDelete) => true,
            (EventName::AutoModerationActionExecution, EventName::AutoModerationActionExecution) => true,
            (EventName::ChannelFollowAdd, EventName::ChannelFollowAdd) => true,
            (EventName::GuildAuditLogEntryCreate, EventName::GuildAuditLogEntryCreate) => true,
            (EventName::GuildApplicationCommandPermissionsUpdate, EventName::GuildApplicationCommandPermissionsUpdate) => true,
            (EventName::GuildApplicationCommandCreate, EventName::GuildApplicationCommandCreate) => true,
            (EventName::GuildApplicationCommandUpdate, EventName::GuildApplicationCommandUpdate) => true,
            (EventName::GuildApplicationCommandDelete, EventName::GuildApplicationCommandDelete) => true,
            (EventName::GuildStickerPackReceive, EventName::GuildStickerPackReceive) => true,
            (EventName::IntegrationSubscribe, EventName::IntegrationSubscribe) => true,
            (EventName::InteractionResponse, EventName::InteractionResponse) => true,
            (EventName::ChannelUnreadUpdate, EventName::ChannelUnreadUpdate) => true,
            (EventName::ConversationSummaryUpdate, EventName::ConversationSummaryUpdate) => true,
            (EventName::SessionsReplace, EventName::SessionsReplace) => true,
            (EventName::GuildJoinRequestUpdate, EventName::GuildJoinRequestUpdate) => true,
            (EventName::ContentInventoryInboxStale, EventName::ContentInventoryInboxStale) => true,
            (EventName::MessageAcknowledgment, EventName::MessageAcknowledgment) => true,
            (EventName::VoiceChannelStatusUpdate, EventName::VoiceChannelStatusUpdate) => true,
            (EventName::UserConnectionUpdate, EventName::UserConnectionUpdate) => true,
            _ => false,
        }
    }
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub(crate) struct GenericMessage {
    #[serde(rename = "op")]
    pub op_code: OpCode,
    #[serde(rename = "d")]
    pub data: Option<Value>,
    #[serde(rename = "s")]
    pub sequence: Option<u64>,
    #[serde(rename = "t")]
    pub event_name: Option<EventName>,
}